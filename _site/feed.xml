<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="http://localhost:4000/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.3.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-02-13T13:05:14-05:00</updated><id>http://localhost:4000//</id><title type="html">Tyler Wood</title><subtitle>A game programmer soon to be graduating from Champlain College.</subtitle><author><name>Tyler Wood</name></author><entry><title type="html">DASHockey at GMGF!</title><link href="http://localhost:4000/DASHockey-At-GMGF/" rel="alternate" type="text/html" title="DASHockey at GMGF!" /><published>2015-11-02T00:00:00-05:00</published><updated>2015-11-02T00:00:00-05:00</updated><id>http://localhost:4000/DASHockey-At-GMGF</id><content type="html" xml:base="http://localhost:4000/DASHockey-At-GMGF/">&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/blog/2015/11/GMGFpass.jpg&quot; alt=&quot;image-right&quot; class=&quot;align-right&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The Green Mountain Games Festival was this past Saturday, and I exhibited DASHockey at it. For some background, GMGF is a student-run, school-hosted event at Champlain College to help foster a developer community in Vermont. This year, there were 25 developers, four guest speakers, and almost 250 people across the floor. This being its second year, I would consider that quite the success.&lt;/p&gt;

&lt;p&gt;On a tangent, now that it is released, I can talk about the AppleTV developer kit I received. Being a completely new platform, I was super excited to develop for it and explore the new UX opportunities with the Siri remote. So, over the past two weeks, I’ve been working on &lt;em&gt;DASHockey&lt;/em&gt;.&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
  &lt;img src=&quot;http://localhost:4000/assets/images/blog/2015/11/dashshotgoal.gif&quot; alt=&quot;&quot; /&gt;
  &lt;figcaption&gt;A middle ground between air hockey and actual hockey.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;I decided late in the game to present it at GMGF, and two days after, I’d consider it a success! I had over 30 people come by and check out DASHockey – some students, some professors, and even some industry vets! The consensus seemed to be that the controls were different but good, and after they got used to swiping and sliding, there were some really good matches. Goal-line saves, wicked bank shots, and a couple OT nail-biters.&lt;/p&gt;

&lt;p&gt;I was not as prepared as I would have liked to be going in, partly because I was crunching to put the polishing touches on it before presenting. Even still, I gave attention to my setup – two monitors - one of which the AppleTV was connected to, and the other looping a video of highlights of the game. It worked well because I did not constantly need someone playing the game in order for people to see what it was. I also had some candy, being Halloween and all, and a whiteboard. On said whiteboard, I had a tournament of sorts, letting people post their Twitter handles and scores.&lt;/p&gt;

&lt;p&gt;There’s still much I want to add, especially visually, but I received a lot of great feedback on the UX, menu design, and even the visual feedback when scoring and shooting. &lt;a href=&quot;https://twitter.com/GameOnGardner&quot;&gt;Bill Gardner&lt;/a&gt;, level/UX designer from Irrational Games (who’s now working on &lt;a href=&quot;http://www.thedeependgames.com&quot;&gt;&lt;em&gt;Perception&lt;/em&gt;, an awesome horror game about being blind&lt;/a&gt;), discussed the UX challenges and opportunities of the AppleTV and the new remote, and gave some really good insight on teaching new control ideas, such as those in DASHockey.&lt;/p&gt;

&lt;p&gt;Come next year, I’m definitely aiming to present again. Hopefully a different game by that point in time, but DASHockey did give me a lot of lessons on what makes exhibiting successful. Including a way to sign up for a newsletter or updates of sorts help engage players, as does a tournament or prize of sorts, or even something as simple as a leaderboard – some competition goes a long way. Multiplayer games also seem to have gotten more attention, but fell when there weren’t enough players. It was a shame that I wasn’t able to get multiplayer working in DASHockey for the festival, but I was able to implement a decent AI, which gave a good taste of the action, and didn’t cause me to rely on having multiple players around at once. Using the AppleTV, being brand spanking new, was a good starting point for discussion and acted as a good segue into my game and my work.&lt;/p&gt;

&lt;p&gt;That was my Halloween weekend – that, lots of candy, and Michael Myers.&lt;/p&gt;</content><author><name>Tyler Wood</name></author><summary type="html"></summary></entry><entry><title type="html">Boom! Back already!</title><link href="http://localhost:4000/Boom!-Back-already!/" rel="alternate" type="text/html" title="Boom! Back already!" /><published>2015-09-24T00:00:00-04:00</published><updated>2015-09-24T00:00:00-04:00</updated><id>http://localhost:4000/Boom!-Back-already!</id><content type="html" xml:base="http://localhost:4000/Boom!-Back-already!/">&lt;p&gt;Look at that - less than two weeks! School has been going swimmingly so far. The weather is starting to cool down, the days are getting a little shorter, and the work is getting a little harder.&lt;/p&gt;

&lt;p&gt;In Game AI over the last two weeks, we’ve been implementing different steering algorithms. This week, we took our jab at simulating flocking - a set of algorithms to simulate a ‘hive mind’ of sorts, like how birds fly in groups, or fish swim in the sea. Here is mine, not too shabby if I do say so myself:&lt;/p&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://www.youtube.com/embed/SFF9pqgZRtY&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;p&gt;The demo features the ability to add/delete unit, as well as mess around with the weight and radius of the three sub-steerings. A stands for alignment, C for cohesion, and S for separation. The behavior behind the steering algorithm is really cool:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;Steering&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FlockingSteering&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getSteering&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Vector2D&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;align&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mpAlignment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getSteering&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getLinear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gpGame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getFileManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getAlignmentWeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Vector2D&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cohesion&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mpCohesion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getSteering&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getLinear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gpGame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getFileManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getCohesionWeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Vector2D&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;separation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mpSeparation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getSteering&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getLinear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gpGame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getFileManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getSeparationWeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Vector2D&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;combined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;combined&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;align&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;combined&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;separation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;combined&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/=&lt;/span&gt;
           &lt;span class=&quot;n&quot;&gt;gpGame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getFileManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getAlignmentWeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
         &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gpGame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getFileManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getCohesionWeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
         &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gpGame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getFileManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getSeparationWeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;combined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;normalize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;combined&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mpMover&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getMaxAcceleration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mLinear&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;combined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This function calls each of the three sub-steering algorithms: alignment to the group, cohesion to the group, and separation from the group, and then combines the returned linear velocity vectors. Using this combined vector, we divide it by the total weight and normalize it, and then multiple it by the maxAcceleration to keep the velocity constant. Super simple!&lt;/p&gt;

&lt;p&gt;The sub-steerings are also super simple. For instance, here’s the Alignment steering:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;Steering&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GroupAlignmentSteering&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getSteering&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mpNeighbors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;gpGame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getUnitManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getNeighbors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mpMover&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getPosition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                                              &lt;span class=&quot;n&quot;&gt;gpGame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getFileManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getAlignmentRadius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Vector2D&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linearVector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mpNeighbors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mpNeighbors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;linearVector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mpNeighbors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getVelocity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	    &lt;span class=&quot;n&quot;&gt;linearVector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mpNeighbors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;linearVector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;normalize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

	    &lt;span class=&quot;n&quot;&gt;mLinear&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linearVector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;For each of the sub-steerings, we find all the other boids within the given radius, mpNeighbors. As long as there are some neighbors, we find their average velocity, normalize the resulting vector, and set it equal to our velocity. Like I said, super simple stuff.&lt;/p&gt;

&lt;p&gt;That being said, it did take me longer than I’d like to admit to get it to this point, but it’s functional, decently good-looking, and sturdy.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.dropbox.com/s/k4z45sseapz3lgt/flocking.zip?dl=0&quot;&gt;Feel free to try it for yourself!&lt;/a&gt; Mess around with the different values, and comment if you find anything interesting!&lt;/p&gt;</content><author><name>Tyler Wood</name></author><summary type="html">Look at that - less than two weeks! School has been going swimmingly so far. The weather is starting to cool down, the days are getting a little shorter, and the work is getting a little harder.</summary></entry><entry><title type="html">Man does time fly.</title><link href="http://localhost:4000/man-does-time-fly/" rel="alternate" type="text/html" title="Man does time fly." /><published>2015-09-15T00:00:00-04:00</published><updated>2015-09-15T00:00:00-04:00</updated><id>http://localhost:4000/man-does-time-fly</id><content type="html" xml:base="http://localhost:4000/man-does-time-fly/">&lt;p&gt;So it’s been nine months since my last post. That’s a little long. Sophomore year has wrapped up, and so has the summer. I released &lt;a href=&quot;https://itunes.apple.com/us/app/flip-a-gravity-game/id908133039?mt=8&quot;&gt;&lt;em&gt;Flip&lt;/em&gt;&lt;/a&gt;, and that was quite the adventure! It did better than I thought it would, and I gained so much valuable knowledge. It actually was picked up by a design studio in Boston and we’re in the process of revamping its graphics and design. Very exciting and completely new territory for me!&lt;/p&gt;

&lt;p&gt;Summer came and went - I hiked some mountains in Maine and Tennessee and it was a nice change of pace from the hustle and bustle of school. I even started work on a couple of prototypes.&lt;/p&gt;

&lt;p&gt;I’m now back in school, starting my Junior year, and holy heck does it make me feel old. Time has really blown by - I still so vividly remember move-in day - and it is scary thinking that happened just over two years ago. I’m excited for my classes this semester, some highlights being AI for Games and Networking and Advanced Topics for Games.I feel like I’ll be learning a lot. I also have a couple of projects on the back burner while things calm down from the initial whirlwind of school; I hope to write about them soon.&lt;/p&gt;

&lt;p&gt;Until next time, and I promise it won’t be nine months this time around.&lt;/p&gt;</content><author><name>Tyler Wood</name></author><summary type="html">So it’s been nine months since my last post. That’s a little long. Sophomore year has wrapped up, and so has the summer. I released Flip, and that was quite the adventure! It did better than I thought it would, and I gained so much valuable knowledge. It actually was picked up by a design studio in Boston and we’re in the process of revamping its graphics and design. Very exciting and completely new territory for me!</summary></entry><entry><title type="html">Time for a new project.</title><link href="http://localhost:4000/Time-for-a-new-project" rel="alternate" type="text/html" title="Time for a new project." /><published>2014-12-07T00:00:00-05:00</published><updated>2014-12-07T00:00:00-05:00</updated><id>http://localhost:4000/Time-for-a-new-project.</id><content type="html" xml:base="http://localhost:4000/Time-for-a-new-project">&lt;p&gt;Been a little since my last post, so I figured I’d give an update on where I am in life. I’m really close to finishing Flip; only need to tune up the tutorial, some sprucing up and then release. Final projects are finishing up for my classes now, so there’s that. Crunch time is so much fun. In all seriousness though, I’m excited for my Graphics Programming final project: it is literally to create as beautiful a game as you can in four weeks; and I’m proud to show it off now.&lt;/p&gt;

&lt;iframe src=&quot;https://player.vimeo.com/video/113875882?byline=0&amp;amp;portrait=0&quot; width=&quot;768&quot; height=&quot;432&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot; style=&quot;padding-top: 1.5em; padding-bottom: 1.5em;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;It’s called &lt;em&gt;Self Destruct&lt;/em&gt;, and it is the cumulation of four weeks of chaos. It features parallax backgrounds, particle effects, shaders, random weapons, enemies, and controller input. The music is pretty darn cool too. I’ll upload it to its portfolio page in the coming days; I first have to worry about finals and other projects, but I promise you’ll be able to play it soon! Keep an eye out for other blog posts too on some of its subsystems and architecture.&lt;/p&gt;</content><author><name>Tyler Wood</name></author><summary type="html">Been a little since my last post, so I figured I’d give an update on where I am in life. I’m really close to finishing Flip; only need to tune up the tutorial, some sprucing up and then release. Final projects are finishing up for my classes now, so there’s that. Crunch time is so much fun. In all seriousness though, I’m excited for my Graphics Programming final project: it is literally to create as beautiful a game as you can in four weeks; and I’m proud to show it off now.</summary></entry><entry><title type="html">School is Back in Session</title><link href="http://localhost:4000/School-Is-Back-In-Session/" rel="alternate" type="text/html" title="School is Back in Session" /><published>2014-09-29T00:00:00-04:00</published><updated>2014-09-29T00:00:00-04:00</updated><id>http://localhost:4000/School-Is-Back-In-Session</id><content type="html" xml:base="http://localhost:4000/School-Is-Back-In-Session/">&lt;p&gt;Aw man, where did the summer go? It is almost October at this point, and I am back on the banks of Lake Champlain. I realize my last post was way back in February, so I think a little recap is necessary. After finishing &lt;a href=&quot;http://localhost:40002014/introducing-Orbit!/&quot;&gt;&lt;em&gt;Orbit&lt;/em&gt;&lt;/a&gt;, I went on to finish my Game Technology class with similar projects. My final project was a puzzle game, which I brought to iOS as part of the project, and I spent the summer progressing along with it. I am almost at the point of releasing it, and hope to do so before the end of the year. It’s called Flip, and has some elements of Tetris and Threes, but it is its complete own idea. I’ve been getting good feedback about its mechanics, so I’m really excited for it.&lt;/p&gt;

&lt;p&gt;Come late August, I made the ugly, then traffic-filled, then beautiful drive from New Jersey to Vermont and settled into my Sophomore year at Champlain. Or so I thought. The Monday after I arrived, I came down with a high fever and the chills, among other things. After a week of trying to fight through it, I realized I was not getting any better. After visiting a couple of doctors, I was diagnosed with viral meningitis. Cue five weeks of back, neck, and joint pain. To put it in perspective of how crippling this disease is, today is the first day I am able to jump without my neck feeling like it will fall off - five weeks since I first caught it. I am still not 100% yet, but I’m getting better everyday.&lt;/p&gt;

&lt;p&gt;As for this semester, I am taking two games-related classes: Data Structures and Algorithms and Graphics Programming I. Graphics Programming is similar to Game Tech where we have a project due each week; a little prototype of a game, except Graphics uses XNA and thus C#. Although similar to AS3 and Java in certain aspects, it is another language I now ‘know.’ What is awesome (yet work-intensive) about Graphics Programming is not only do the projects focus on purely graphic elements of games, but also on the little things that don’t seem to fit in their own class (unless there is a Tidbits for Games 320 that I don’t know about). Things like menu systems, or supporting different languages, or correctly implementing pause screens - the things that are not polish, but aren’t necessary for the games I create in class. It is nice to learn these things without needing to just hack them together and hope it is efficient like in the past.&lt;/p&gt;

&lt;p&gt;With a project being due each week for this class, there is a trade-off between efficiency, clarity, and just getting it done. My code has been a little sloppy on some of these projects. I decided to spend the weekend going back to one of my projects and refactor the code. It was not as bad as I thought it was, but I was still able to spruce it up.&lt;/p&gt;

&lt;p&gt;My goal was to make the project as neat as possible without tearing my hair out. The only thing that’s not to my liking is the main gameplay itself, as I had too many dependencies in the main game class to compartmentalize itself into its own class. Other than that, every other screen displayed is its own class. I cleaned up the language selection code. I probably had close to 100 redundant if statements pertaining to languid; now I have none. The enemies all stem from a base enemy class, as do the menus from a base menu class. The player is its own class. The only thing I didn’t do is the actual gameplay itself, but that would require more time than just a weekend. The main class after all of this was said and done went from almost 1100 lines of (crunched) code, to just over 500 (I think something like 512, definitely under half) of properly spaced code. The gameplay is the same, but the code, although it might not be a ton more efficient, is definitely cleaner and much easier to read and follow.&lt;/p&gt;

&lt;p&gt;I like toying with new ideas and concepts and creating new prototypes, but it is necessary every now and then to learn new concepts pertaining to actual code organization, and I’m sure I have just scratched the surface. I know there are many many many ways of organizing a game’s code, and this little weekend project on a prototype has inspired me to research these methods. Stay tuned, for there may or may not be a blog post in the future pertaining to these methods, or Flip - whichever takes hold of my mind next.&lt;/p&gt;</content><author><name>Tyler Wood</name></author><summary type="html">Aw man, where did the summer go? It is almost October at this point, and I am back on the banks of Lake Champlain. I realize my last post was way back in February, so I think a little recap is necessary. After finishing Orbit, I went on to finish my Game Technology class with similar projects. My final project was a puzzle game, which I brought to iOS as part of the project, and I spent the summer progressing along with it. I am almost at the point of releasing it, and hope to do so before the end of the year. It’s called Flip, and has some elements of Tetris and Threes, but it is its complete own idea. I’ve been getting good feedback about its mechanics, so I’m really excited for it.</summary></entry><entry><title type="html">Introducing Orbit!</title><link href="http://localhost:4000/introducing-Orbit!/" rel="alternate" type="text/html" title="Introducing Orbit!" /><published>2014-02-22T00:00:00-05:00</published><updated>2014-02-22T00:00:00-05:00</updated><id>http://localhost:4000/introducing-Orbit!</id><content type="html" xml:base="http://localhost:4000/introducing-Orbit!/">&lt;p height=&quot;450px&quot; width=&quot;450px&quot; style=&quot;image-align: center&quot;&gt;&lt;img src=&quot;http://localhost:4000assets/images/blog/2014/02/orbitintro.gif&quot; alt=&quot;Orbit gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let me be the first to introduce you to &lt;a href=&quot;http://localhost:4000portfolio/orbit/&quot;&gt;Orbit!&lt;/a&gt; Being the latest creation from the depths of my mind, I’m partly entitled to say this is my favorite. The task was to create all the graphics through Flash’s graphic class, so everything in the game (apart from the text) is generated through code. It was a nice little challenge to have as little going on graphically, but still be able to distinguish between elements while playing.&lt;/p&gt;

&lt;p&gt;While creating this, I had mobile in mind even though the size doesn’t match up. Swiping up and down feels so much better than just pushing an arrow key. It’s a more natural gesture, and matches more to what the player does in the game. Speaking of which, gameplay consists of orbiting around three rings, avoiding the red dots, collecting green, and only collecting blue if needed. The player (the big gold dot in the picture above) can switch between the three rings, and gets a point for every green dot collected. If he collides with a red dot, he loses a life (and shrinks to a third of his size). The blue dots, when the player hits them, restore all of the player’s health, but subtract five points from their score. It adds a nice little layer of depth - at times you want to avoid them, and at others you really need them.&lt;/p&gt;

&lt;p&gt;There are different spawn patterns based on the player’s score, and I feel there’s a good ramp-up in difficulty. I had &lt;em&gt;Super Hexagon&lt;/em&gt; in mind when creating this - start hard, get harder. I feel I hit the nail on the head, although I feel there could be one more difficulty past the last one currently (the game levels out after the player reaches 80). Something new I added that isn’t in my previous prototypes is high-score tracking. It was super simple, and I’m really itching to see how else I can use it in future projects. Save states are definitely a possibility.&lt;/p&gt;

&lt;p&gt;As with the rest of my prototypes, this is still on the “I might come back to” shelf. Although I feel it can be a little repetitive, I do really like the gameplay, and can so easily see it on my phone. We’ll see if that ever pans out. &lt;a href=&quot;http://localhost:4000portfolio/orbit/&quot;&gt;Give it a whirl here!&lt;/a&gt;&lt;/p&gt;</content><author><name>Tyler Wood</name></author><summary type="html"></summary></entry><entry><title type="html">Design Insight</title><link href="http://localhost:4000/design-Insight/" rel="alternate" type="text/html" title="Design Insight" /><published>2014-02-18T00:00:00-05:00</published><updated>2014-02-18T00:00:00-05:00</updated><id>http://localhost:4000/design-Insight</id><content type="html" xml:base="http://localhost:4000/design-Insight/">&lt;p&gt;So in my last (and first) post, I went into detail on how I personally design games.  And what better than to, like my wood shop teacher in junior high always said, show by example.&lt;/p&gt;

&lt;p&gt;I created a small prototype over the past two weeks for my Game Technology class. The guidelines were simple: create a horizontal scroller. Like my past projects though, I wanted to test the boundaries, and see how abstract I could make the topic. The first thing I did was ask what constitutes a horizontal scroller? Obviously some sense of horizontal movement, but what needs to move to give a good sense of this right-to-left movement. Through some intense research (read: Google Images), I found that generally the background and enemies move, while the player stays stationery with regards to the x-coordinate. I thought that was too simple though, and it was just a 90 degree rotation of my previous project, &lt;a href=&quot;http://localhost:4000portfolio/blur/&quot;&gt;&lt;em&gt;Blur&lt;/em&gt;&lt;/a&gt;. So I decided to take things one step further.&lt;/p&gt;

&lt;p&gt;I made the background as simple as possible. A sine wave slowly moving across the screen. The enemies are simple too, little blocks with arms. The player is simple too, a little arrow, but at the same time it’s not. It has free movement over the screen. It has an ever-changing tail. It constantly moves forward. It’s different.&lt;/p&gt;

&lt;p&gt;When the player overlaps its tail, it creates a barrier that stops enemies. At first, they were bombs to be detonated by the player, but it just wasn’t fun, and way too enemies made it across the screen (and thus slowly killing the sine wave). The larger the shape created by the overlap, the larger the barrier, and the more enemies it can take before it disappears. The player’s tail regrows first by enemies hitting barriers, and secondly by the player hitting enemies. Barriers give more bang for the buck, for overlapping your tail is the main mechanic of the game, but I figured the player needed a way to be able to single-out enemies about to hit the edge of the screen.&lt;/p&gt;

&lt;p&gt;Speaking of which, when enemies do hit the edge of the screen, they deplete the sine wave, and in order to repair it, the player needs to pick up shrunk barriers; after a while they turn red and shrink. They still work and can block enemies, they’re just smaller. The key though is that the larger the number, the larger the sine wave gets repaired. But at the same time, the player is getting rid of a barrier, so there’s a fine balance to be played with.&lt;/p&gt;

&lt;p&gt;The best way to experience first hand is to obviously &lt;a href=&quot;http://localhost:4000portfolio/lines/&quot;&gt;play it&lt;/a&gt;. I feel it is a deceptively deep game. There are still some balancing issues and design flaws, but I am happy with the uniqueness of this prototype, and hope to return to it someday.&lt;/p&gt;

&lt;p height=&quot;840px&quot; width=&quot;418px&quot; style=&quot;image-align: center&quot;&gt;&lt;img src=&quot;http://localhost:4000assets/images/blog/2014/02/linesmidgame.gif&quot; alt=&quot;Lines gif&quot; /&gt;&lt;/p&gt;</content><author><name>Tyler Wood</name></author><summary type="html">So in my last (and first) post, I went into detail on how I personally design games.  And what better than to, like my wood shop teacher in junior high always said, show by example.</summary></entry><entry><title type="html">Under way…</title><link href="http://localhost:4000/under-way" rel="alternate" type="text/html" title="Under way..." /><published>2014-01-29T00:00:00-05:00</published><updated>2014-01-29T00:00:00-05:00</updated><id>http://localhost:4000/under-way...</id><content type="html" xml:base="http://localhost:4000/under-way">&lt;p&gt;Now that everything is nice and settled, it’s finally time to write. I honestly don’t know how often I’ll be writing here, for I’m sure my interest will wax and wane. Regardless, I plan on this to be just my musings on the current state of the industry, or projects I’m working on, or school - topics along that nature.&lt;/p&gt;

&lt;p&gt;As for me and my style, I like to think that innovation lies in simplicity. If you glance at my past creations, they’re all relatively simple derivatives of classics - Pong, a maze, and a vertical shooter. But I think, although unbalanced, they are fun to play and good reminders that there is still so much undiscovered in terms of mechanics, both large and small.&lt;/p&gt;

&lt;p&gt;I go about creating prototypes by thinking of an action and building off of it. Take Blur for instance. The action? Switching between tracks - Boson X-like. I then went to implement that as simply as possible. Add a couple of enemies and a constraint, and we get Blur. The game revolves around the core mechanic, and builds off of it. From Charmie of funstorm so elegantly puts it:&lt;/p&gt;

&lt;figure style=&quot;width: 400px&quot; class=&quot;align-right&quot;&gt;
  &lt;img src=&quot;http://localhost:4000/assets/images/blog/2014/01/corediagram.png&quot; alt=&quot;&quot; /&gt;
  &lt;figcaption&gt;Test caption.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Although Charmie goes into the outer layers of a game too, I feel it’s the inner-nucleus that is most important. For without the nucleus, it is impossible for the game as a whole to be fun. It’s like the caramel-onions corrupt teenagers give out at Halloween - no matter how much caramel and sprinkles they put on it, it still tastes like an onion. Without a good core mechanic, a visually awesome game isn’t so awesome.&lt;/p&gt;

&lt;p&gt;Not all games fit this model well though. Take any of the GTA series for example. They’re sandbox games, but there are many core mechanics - driving, shooting, exploration, etc. They’re also multi-faceted with regards to progression - story progression, mission progression, exploration progression. Obviously, then, GTA doesn’t fit the single core mechanic model well, but by no means is it a bad series. Quite the contrary.&lt;/p&gt;

&lt;p&gt;So, the single core mechanic is by no means an end-all, be-all, but I feel when dealing with smaller-scope games, especially mobile, it’s important for the main mechanic, whether it be flinging birds or running endlessly while sliding and turning, to be spot on.&lt;/p&gt;

&lt;p&gt;That’s how I go about design.&lt;/p&gt;</content><author><name>Tyler Wood</name></author><summary type="html">Now that everything is nice and settled, it’s finally time to write. I honestly don’t know how often I’ll be writing here, for I’m sure my interest will wax and wane. Regardless, I plan on this to be just my musings on the current state of the industry, or projects I’m working on, or school - topics along that nature.</summary></entry></feed>
