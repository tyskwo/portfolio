<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="http://localhost:4000/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.4.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-05-04T12:37:25-04:00</updated><id>http://localhost:4000//</id><title type="html">Tyler Wood</title><subtitle>A game programmer soon to be graduating from Champlain College that has an intense passion for UI and AI.</subtitle><author><name>Tyler Wood</name><email>me@tyskwo.com</email></author><entry><title type="html">The week of too many hours.</title><link href="http://localhost:4000/2017/the-week-of-too-many-hours/" rel="alternate" type="text/html" title="The week of too many hours." /><published>2017-04-03T00:00:00-04:00</published><updated>2017-04-03T00:00:00-04:00</updated><id>http://localhost:4000/2017/the-week-of-too-many-hours</id><content type="html" xml:base="http://localhost:4000/2017/the-week-of-too-many-hours/">&lt;p&gt;It was a very busy week in the cubicles of &lt;em&gt;Office Mayhem&lt;/em&gt;, but with work comes progress. With only three weeks left, we could use as much progress as we can get our hands on.&lt;/p&gt;

&lt;p&gt;The biggest addition is the introduction of timer tasks: a group-wide task where all of the players fight over doing the most of whatever the task dictates (like throw everything out, or answer the most phone calls). When the timer runs out, points are awarded to first, second, and third place. They have been received really well at QA, and experienced players love the new strategy elements they bring to the game.&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
  &lt;img src=&quot;http://localhost:4000/assets/images/blog/2017/04/timerUI.gif&quot; /&gt;
  &lt;figcaption&gt;Only two players, but here's a timer task in action. With four players, it is a hectic dash to come in first.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;http://localhost:4000/assets/images/blog/2017/04/timerIteration.png&quot;&gt;&lt;img src=&quot;http://localhost:4000/assets/images/blog/2017/04/timerIteration.png&quot; alt=&quot;iteration&quot; style=&quot;width: 350px&quot; class=&quot;align-right&quot; /&gt;&lt;/a&gt;
The UI for timer tasks fell on my shoulders, and it was a nice change of pace for me. With that said, it came with its fair share of difficulties: we wanted to introduce all of this new functionality to our pre-existing &lt;code class=&quot;highlighter-rouge&quot;&gt;TaskCard&lt;/code&gt; framework, while still letting the players get the information they needed at a glance. The finished product is above, obviously, but there was a fair amount of iteration to get there.&lt;/p&gt;

&lt;p&gt;Another feature added this week was a plug-in ‘attract mode’ – basically a kiosk mode if the game sits idle for too long. We also knocked out a lot of the bugs and polish items we’ve been meaning to get to. &lt;a href=&quot;http://andrewmillsap.weebly.com&quot;&gt;Andy&lt;/a&gt; added random character creation on the start screen which is a nice bit of polish, and &lt;a href=&quot;http://tonyl.info&quot;&gt;Tony&lt;/a&gt; finished the stamp system in the break room, which finally finishes our inner game loop.&lt;/p&gt;

&lt;p&gt;This coming week, we hope to spruce up our tutorial systems so new players experience even less friction when playing the game, and to implement the accolade system and Employee of the Week room to finally be feature complete. After that it would be small ticket items like implementing new sounds, tasks, and characters. The finish line is really close, and I can’t wait to cross it.&lt;/p&gt;</content><author><name>Tyler Wood</name><email>me@tyskwo.com</email></author><summary type="html">It was a very busy week in the cubicles of Office Mayhem, but with work comes progress. With only three weeks left, we could use as much progress as we can get our hands on.</summary></entry><entry><title type="html">Back in the swing of things.</title><link href="http://localhost:4000/2017/back-in-the-swing/" rel="alternate" type="text/html" title="Back in the swing of things." /><published>2017-03-27T00:00:00-04:00</published><updated>2017-03-27T00:00:00-04:00</updated><id>http://localhost:4000/2017/back-in-the-swing</id><content type="html" xml:base="http://localhost:4000/2017/back-in-the-swing/">&lt;p&gt;There’s something about the haphazardness of small island urban planning that is oddly refreshing to me. Maybe it’s the narrow streets, buildings right up against the side of the road, or the simpler, less rigidness of it all. Regardless, spring break has ended and it’s back to the office. We have made quite a bit of progress since coming back to cold, wet Burlington.&lt;/p&gt;

&lt;p&gt;While &lt;a href=&quot;http://richardkingcapstone.blogspot.com&quot;&gt;Richard&lt;/a&gt; and &lt;a href=&quot;http://www.willconcannonart.com&quot;&gt;Will&lt;/a&gt; were at PAX, &lt;a href=&quot;https://tonyl.info&quot;&gt;Tony&lt;/a&gt; was hard at work optimizing &lt;em&gt;Office Mayhem&lt;/em&gt;. He managed to double our frame rate, and almost triple it on low-end Macs like mine. On higher end machines it isn’t too noticeable, but it is great to be able to lower our low-end target even more, especially if we decide to release. I took spring break as just that, a break, but towards the end I spent time on a lot of the smaller polish-level items we have been meaning to get done: getting random markers from the copier, level randomization, a better item spawning system in the tutorial, etc.&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
 &lt;img src=&quot;http://localhost:4000/assets/images/blog/2017/03/whiteboard.gif&quot; /&gt;
  &lt;figcaption&gt;The whiteboard is still being iterated on, but it's in a very good place. Players can draw and erase, and get new markers from the copier.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Once we were all back in the Green Mountain state, production was right back in full swing. &lt;a href=&quot;https://npaquettewordpress.wordpress.com&quot;&gt;Norman&lt;/a&gt; started working on the fifth character head, and &lt;a href=&quot;http://andrewmessier.blogspot.com&quot;&gt;Andrew&lt;/a&gt; was working on new animations for our ‘win’ room at the end of the work week, while &lt;a href=&quot;http://www.tim-healey.com&quot;&gt;Tim&lt;/a&gt; has been working on a third set of levels, which I can’t wait to implement.  Richard has been working on lobby music for the start and break rooms, which are eerily quiet right now. The biggest change we brought to QA testing was character customization: &lt;a href=&quot;http://andrewmillsap.weebly.com&quot;&gt;Andy&lt;/a&gt; worked diligently to add in swappable bodies and heads, which has been a really great addition judging by the feedback from QA.&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
  &lt;img src=&quot;http://localhost:4000/assets/images/blog/2017/03/character_selection.gif&quot; /&gt;
  &lt;figcaption&gt;If you look carefully, there &lt;em&gt;is&lt;/em&gt; a headless option in there. We're unsure if it will stay though – just a joke for now.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;I spent this week helping Andy with the rough edges of character customization, as well as implementing new particles I received from &lt;a href=&quot;http://jeremynroot.com&quot;&gt;Jeremy&lt;/a&gt;. We finally made the elevator a breakable object, which leads to some interesting strategies. I also implemented, and removed, group tasks. These tasks worked similar to normal tasks, but they would replace all current tasks, and there would only be one of them – creating a four player rumble of sorts to complete this task. After bringing them to QA, we soon realized that they acted as a pinch point in the game flow, and could very easily let first place keep their lead in certain instances, basically creating a standstill. While fun to work around, we ultimately decided that this wasn’t the type of pace we wanted, and decided to scrap it. We took the time to look deeper at timer tasks – a specific type of group tasks that want players to do the &lt;em&gt;most&lt;/em&gt; of something in a given amount of time. These don’t seem to have the same pinch points as normal group tasks, so we plan on implementing these this coming week, and hoping they fare better at QA.&lt;/p&gt;

&lt;p&gt;We also took the time this week to record some gameplay for an alpha video. Take a watch!&lt;/p&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://www.youtube.com/embed/839Ih0TVC44&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;</content><author><name>Tyler Wood</name><email>me@tyskwo.com</email></author><summary type="html">There’s something about the haphazardness of small island urban planning that is oddly refreshing to me. Maybe it’s the narrow streets, buildings right up against the side of the road, or the simpler, less rigidness of it all. Regardless, spring break has ended and it’s back to the office. We have made quite a bit of progress since coming back to cold, wet Burlington.</summary></entry><entry><title type="html">PAX is over, time to relax a little.</title><link href="http://localhost:4000/2017/PAX-relax/" rel="alternate" type="text/html" title="PAX is over, time to relax a little." /><published>2017-03-13T00:00:00-04:00</published><updated>2017-03-13T00:00:00-04:00</updated><id>http://localhost:4000/2017/PAX-relax</id><content type="html" xml:base="http://localhost:4000/2017/PAX-relax/">&lt;p&gt;I write this sitting on a beach. It’s relaxing, but I’m more worried about getting sand in the keyboard. This week will be a calm, relaxing break before the final whirlwind (it’s so scary that graduation is only seven weeks away). PAX is now over, but it was a whole ‘nother whirlwind before (and during). Over the past week, we have added the improved whiteboard break rooms, all of the playable characters and respective animations, improvements to the game flow, updating many of the sounds, and fixing as many bugs as we could find. We were all worn out by the end.&lt;/p&gt;

&lt;figure class=&quot;half&quot;&gt;
    &lt;a href=&quot;/assets/images/blog/2017/03/richardisdesign.png&quot;&gt;&lt;img src=&quot;/assets/images/blog/2017/03/richardisdesign.png&quot; /&gt;&lt;/a&gt;
    &lt;a href=&quot;/assets/images/blog/2017/03/pax.png&quot;&gt;&lt;img src=&quot;/assets/images/blog/2017/03/pax.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Yes, Richard &lt;em&gt;is&lt;/em&gt; design. Players are able to draw with markers on the whiteboard. On the right, we were quite excited for PAX, and you can see our new characters.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;We learned so much at PAX – we had over a thousand people play a round or two! Our tutorial can be smoother, and that’s something we’ve noted for a while now – the game has just been evolving at such a rapid pace that we’ve neglected it. We are planning to add button prompts above the relative items for each stage of the tutorial to help engrain what buttons perform which actions. This also shows the pitfalls of Playstation vs Xbox controllers, with PS’ X button being Xbox’s A button, and on the Xbox controllers, we use both X and A a lot, so to people who play more on Playstation, their controllers are different, and muscle memory took over. Otherwise, the booth was really well presented; &lt;a href=&quot;http://willconcannonart.com&quot;&gt;Will&lt;/a&gt; did a great job creating marketing materials for it. I really hope Champlain believes we represented them well. We seemed to have a constant flux of people playing, and we even had lines at the busier moments, which is a huge boost of pride to the team.&lt;/p&gt;

&lt;figure class=&quot;half&quot;&gt;
    &lt;a href=&quot;/assets/images/blog/2017/03/OM_businesscard.jpg&quot;&gt;&lt;img src=&quot;/assets/images/blog/2017/03/OM_businesscard.jpg&quot; /&gt;&lt;/a&gt;
    &lt;a href=&quot;/assets/images/blog/2017/03/OM_tentcard.jpg&quot;&gt;&lt;img src=&quot;/assets/images/blog/2017/03/OM_tentcard.jpg&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Here's the tent and team business cards that we created for the booth at PAX. &lt;a href=&quot;http://willconcannonart.com&quot;&gt;Will&lt;/a&gt; did a great job designing them.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;We also received a lot of praise, which was a little unexpected. &lt;a href=&quot;http://richardkingcapstone.blogspot.com&quot;&gt;Richard&lt;/a&gt; and &lt;a href=&quot;http://willconcannonart.com&quot;&gt;Will&lt;/a&gt; said that there were complete strangers laughing with each other, and if &lt;em&gt;Office Mayhem&lt;/em&gt; can do that, maybe it’s not half bad. There were a good handful of people asking where to buy it. Buy it. Those words seem alien to me. People are willing to pay money for &lt;em&gt;Office Mayhem&lt;/em&gt; – that’s insane. We also had people from 3 to 63 learn, play, and have fun playing it, which finally solidifies our target market of a couch party game – you never know who’s going to be sitting on the couch next to you.&lt;/p&gt;

&lt;figure class=&quot;half&quot;&gt;
    &lt;a href=&quot;/assets/images/blog/2017/03/PAX_booth.jpg&quot;&gt;&lt;img src=&quot;/assets/images/blog/2017/03/PAX_booth.jpg&quot; /&gt;&lt;/a&gt;
    &lt;a href=&quot;/assets/images/blog/2017/03/PAX_people.jpg&quot;&gt;&lt;img src=&quot;/assets/images/blog/2017/03/PAX_people.jpg&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Props to Richard for his &lt;em&gt;Office Mayhem&lt;/em&gt;-blue shades.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;We also might have some very, very, &lt;em&gt;very&lt;/em&gt; exciting news about &lt;em&gt;Office Mayhem&lt;/em&gt; in the near future, but I can’t play that hand quite yet. I hope to be able to talk more about it soon.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;In &lt;a href=&quot;http://localhost:4000/2017/action-a-cpp-interpolation-framework/&quot;&gt;my last post about Action&lt;/a&gt;, I mentioned that &lt;code class=&quot;highlighter-rouge&quot;&gt;Action&lt;/code&gt; did not have support for bezier/custom curves. I have since added that functionality with &lt;code class=&quot;highlighter-rouge&quot;&gt;Action::GetCurveFromPoints(T x1, T y1, T x2, T y2)&lt;/code&gt; for cubic bezier curves, and &lt;code class=&quot;highlighter-rouge&quot;&gt;Action::GetCurveFromPoint(T x1, T y1)&lt;/code&gt; for quadratic curves. The functions clamp the x coordinates to [0, 1] to prevent the time axis from going in reverse, which could cause some ill-intended effects.&lt;/p&gt;

&lt;p&gt;I also have encapsulated the framework entirely in the &lt;code class=&quot;highlighter-rouge&quot;&gt;Action&lt;/code&gt; namespace – before the timing functions were not under it. Hopefully this will fix any potential namespace clashes.&lt;/p&gt;

&lt;p&gt;Simply update your local repository, or &lt;a href=&quot;https://github.com/tyskwo/action&quot;&gt;pull it.&lt;/a&gt;&lt;/p&gt;</content><author><name>Tyler Wood</name><email>me@tyskwo.com</email></author><summary type="html">I write this sitting on a beach. It’s relaxing, but I’m more worried about getting sand in the keyboard. This week will be a calm, relaxing break before the final whirlwind (it’s so scary that graduation is only seven weeks away). PAX is now over, but it was a whole ‘nother whirlwind before (and during). Over the past week, we have added the improved whiteboard break rooms, all of the playable characters and respective animations, improvements to the game flow, updating many of the sounds, and fixing as many bugs as we could find. We were all worn out by the end.</summary></entry><entry><title type="html">Action: A C++11 interpolation framework</title><link href="http://localhost:4000/2017/action-a-cpp-interpolation-framework/" rel="alternate" type="text/html" title="Action: A C++11 interpolation framework" /><published>2017-03-05T00:00:00-05:00</published><updated>2017-03-05T00:00:00-05:00</updated><id>http://localhost:4000/2017/action-a-cpp-interpolation-framework</id><content type="html" xml:base="http://localhost:4000/2017/action-a-cpp-interpolation-framework/">&lt;h5 class=&quot;notice--primary&quot; id=&quot;before-i-begin-the-repo-for-action-can-be-found-here&quot;&gt;Before I begin, the repo for Action can be found &lt;a href=&quot;http://github.com/tyskwo/action&quot;&gt;here.&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;Since &lt;a href=&quot;http://localhost:4000/work/96_flip/&quot;&gt;Flip&lt;/a&gt;, almost three years ago now, I’ve used interpolation in every game that I’ve created – starting with &lt;a href=&quot;http://gamua.com/starling/&quot;&gt;Starling&lt;/a&gt;, and then moving to &lt;a href=&quot;http://www.pixelplacement.com/itween/index.php&quot;&gt;iTween in Unity&lt;/a&gt;, and &lt;a href=&quot;https://developer.apple.com/reference/spritekit/skaction&quot;&gt;SKActions in SpriteKit&lt;/a&gt;. Interpolation is used everywhere in games, from UI animations, to AI actions, animations, and even world building. It truly could be looked at as a universal tool in a game developer’s toolbox.&lt;/p&gt;

&lt;h2 id=&quot;what-is-interpolation&quot;&gt;What is interpolation?&lt;/h2&gt;

&lt;p&gt;Interpolation is a method of constructing new data within the range of a discrete set of known data. Put simply, it’s the translating of one piece of data into another piece of data.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://mollyrocket.com/casey/stream_0018.html&quot;&gt;Casey Muratori&lt;/a&gt;, who worked on &lt;em&gt;The Witness&lt;/em&gt;, has a great video on the basics of interpolation, which I highly, &lt;em&gt;highly&lt;/em&gt; suggest watching. He explains bezier curves in 40 seconds better than other’s have done in half an hour.&lt;/p&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://www.youtube.com/embed/S2fz4BS2J3Y&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;h2 id=&quot;introducing-action&quot;&gt;Introducing Action.&lt;/h2&gt;

&lt;p&gt;I’ve been wanting to roll my own solution for a while now. Not necessarily because I think I can do it better, or include more features, but so I can say I’ve created my own, gain experience in creating the backend of such a system, and have another tool at my disposal.&lt;/p&gt;

&lt;p&gt;Thus, Action was created.&lt;/p&gt;

&lt;h5 id=&quot;what-it-is&quot;&gt;What it is.&lt;/h5&gt;

&lt;p&gt;It is a time-based, self-contained interpolation framework. It contains the &lt;a href=&quot;http://easings.net&quot;&gt;common list of easing functions&lt;/a&gt;, and the ideology of a &lt;code class=&quot;highlighter-rouge&quot;&gt;Single&lt;/code&gt; action. &lt;code class=&quot;highlighter-rouge&quot;&gt;Single&lt;/code&gt; contains a value to interpolate, start/end values of that interpolation, a duration of how long the interpolation will take, a start-delay, a loop type (currently &lt;code class=&quot;highlighter-rouge&quot;&gt;None, Normal, or Yoyo&lt;/code&gt;), an easing type, and an optional callback to be called upon completion of the interpolation.&lt;/p&gt;

&lt;p&gt;There are also &lt;code class=&quot;highlighter-rouge&quot;&gt;Group&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Sequence&lt;/code&gt; actions: the former is a list of &lt;code class=&quot;highlighter-rouge&quot;&gt;Singles&lt;/code&gt; that are run in concurrency, with an optional callback when the entire group is finished, and the latter is similar, except the &lt;code class=&quot;highlighter-rouge&quot;&gt;Singles&lt;/code&gt; run sequentially.&lt;/p&gt;

&lt;p&gt;The value to be interpolated is a reference to memory, and thus can be applied to any data of any object: volume of a sound clip, scale of a transform, rotation of a quaternion, etc.&lt;/p&gt;

&lt;h5 id=&quot;what-it-isnt&quot;&gt;What it isn’t.&lt;/h5&gt;

&lt;p&gt;The easing functions (called &lt;code class=&quot;highlighter-rouge&quot;&gt;TimingFunctions&lt;/code&gt; in the code base) are exposed, so more can be added, but currently there is no support for bezier/custom curves. Because they’re stored as function pointers, there’s no way to include more parameters in the call without casting another &lt;code class=&quot;highlighter-rouge&quot;&gt;typedef&lt;/code&gt;. I’m experimenting to find the best way to implement this.&lt;/p&gt;

&lt;p&gt;There currently is also no option to pause actions, but that is due to the fact of me focusing on the interpolation framework more than the timer it runs on.&lt;/p&gt;

&lt;h2 id=&quot;how-to-use-it&quot;&gt;How to use it.&lt;/h2&gt;

&lt;p&gt;First, include &lt;code class=&quot;highlighter-rouge&quot;&gt;Action.h&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s create a value:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// imagine t is some object,
// with testInt being some int in that class.
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//                 variable to change, 'start' value, 'end' value
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;         &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;             &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There are common interpolations generally referred to as &lt;code class=&quot;highlighter-rouge&quot;&gt;To&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;From&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;FromTo&lt;/code&gt;. The above is an example of &lt;code class=&quot;highlighter-rouge&quot;&gt;FromTo&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;To&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;From&lt;/code&gt; could be modeled by doing:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// To:
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// From:
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testInt&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;singles&quot;&gt;Singles&lt;/h3&gt;

&lt;p&gt;Now let’s take that value to interpolate, and create a &lt;code class=&quot;highlighter-rouge&quot;&gt;Single&lt;/code&gt; from it:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;Action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addSingle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                  &lt;span class=&quot;mf&quot;&gt;3.0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// duration  
&lt;/span&gt;                  &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// delay
&lt;/span&gt;                  &lt;span class=&quot;n&quot;&gt;TimingFunctions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExponentialEaseIn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There’s a lot of customization in &lt;code class=&quot;highlighter-rouge&quot;&gt;addSingle&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Callback&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TimingFunction&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TimingFunction&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Callback&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TimingFunction&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Callback&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoopTypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TimingFunction&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TimingFunction&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Callback&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TimingFunction&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Callback&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoopTypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p class=&quot;notice--info&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; For any variable that is not set in the method call, the default is constructed: 0 seconds for delay, 1 second for duration, no looping, no callback, and &lt;code class=&quot;highlighter-rouge&quot;&gt;Linear&lt;/code&gt; for the timing function.&lt;/p&gt;

&lt;p&gt;Rather than calling one of the predefined methods, you can create a &lt;code class=&quot;highlighter-rouge&quot;&gt;Single&lt;/code&gt; on your own:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;Single&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Single&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setDuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;3.0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setTimingFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TimingFunctions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BounceEaseOut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setDelay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.5&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setLooptype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LoopTypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Yoyo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// more on callbacks at the end of this post
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addSingle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Action::addSingle&lt;/code&gt; automatically starts the interpolation (including its delay).&lt;/p&gt;

&lt;h3 id=&quot;groups-and-sequences&quot;&gt;Groups and Sequences&lt;/h3&gt;

&lt;p&gt;Now what about groups and sequences?&lt;/p&gt;

&lt;p&gt;Let’s first create a list of &lt;code class=&quot;highlighter-rouge&quot;&gt;Singles&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SingleBase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;singleList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SingleBase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;createSingle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                         &lt;span class=&quot;mf&quot;&gt;3.0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                         &lt;span class=&quot;mf&quot;&gt;2.5&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                         &lt;span class=&quot;n&quot;&gt;TimingFunctions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExponentialEaseIn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;createSingle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                         &lt;span class=&quot;mf&quot;&gt;3.0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// no delay on this one.
&lt;/span&gt;                         &lt;span class=&quot;n&quot;&gt;TimingFunctions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExponentialEaseOut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p class=&quot;notice--warning&quot;&gt;You’ll notice here that we call &lt;code class=&quot;highlighter-rouge&quot;&gt;Action::createSingle&lt;/code&gt; as opposed to &lt;code class=&quot;highlighter-rouge&quot;&gt;Action::addSingle&lt;/code&gt;. The former simply returns a &lt;code class=&quot;highlighter-rouge&quot;&gt;Single&lt;/code&gt; object without adding it to the pool of actions, whereas the latter creates the &lt;code class=&quot;highlighter-rouge&quot;&gt;Single&lt;/code&gt;, adds it to the pool, but doesn’t return anything.&lt;/p&gt;

&lt;p class=&quot;notice&quot;&gt;You can also create &lt;code class=&quot;highlighter-rouge&quot;&gt;Singles&lt;/code&gt; like above on your own and create a list of them that way.&lt;/p&gt;

&lt;p&gt;After the list of singles is constructed, creating a &lt;code class=&quot;highlighter-rouge&quot;&gt;Group&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;Sequence&lt;/code&gt; is very straightforward:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;Callback&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;groupCB&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](){&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;GROUP COMPLETE&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;sequenceCB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](){&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SEQUENCE COMPLETE&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addGroupFrom&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;singleList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// list of singles     
&lt;/span&gt;                        &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// additional delay on top of singles' delays     
&lt;/span&gt;                        &lt;span class=&quot;n&quot;&gt;groupCB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// callback for when the entire group is done
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addSequenceFrom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;singleList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;      
                        &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;             
                        &lt;span class=&quot;n&quot;&gt;sequenceCB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Like &lt;code class=&quot;highlighter-rouge&quot;&gt;Singles&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Action::addGroupFrom&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;addSequenceFrom&lt;/code&gt; automatically starts the interpolations.&lt;/p&gt;

&lt;p&gt;  All that’s left is to call &lt;code class=&quot;highlighter-rouge&quot;&gt;Action::update();&lt;/code&gt; in your main game loop (otherwise none of the actions will run).&lt;/p&gt;

&lt;h3 id=&quot;a-word-on-callbacks&quot;&gt;A word on callbacks.&lt;/h3&gt;

&lt;p&gt;Callbacks are typedefs of &lt;code class=&quot;highlighter-rouge&quot;&gt;std::function&amp;lt;void()&amp;gt;&lt;/code&gt;. Thus, we can use &lt;code class=&quot;highlighter-rouge&quot;&gt;std::bind&lt;/code&gt; and lambda function notation to create callbacks:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;Callback&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exampleCB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](){&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SINGLE COMPLETE&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The beauty of them being lambdas means any code can be executed as a callback. Going back to our example &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt; class from the start of this post:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;Callback&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;someRandomFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;example&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Creating a &lt;code class=&quot;highlighter-rouge&quot;&gt;Single&lt;/code&gt; with a callback is as simple as:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;Action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addSingle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                  &lt;span class=&quot;mf&quot;&gt;3.0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// duration  
&lt;/span&gt;                  &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// delay
&lt;/span&gt;                  &lt;span class=&quot;n&quot;&gt;TimingFunctions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExponentialEaseIn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                  &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](){&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;SINGLE COMPLETE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Or, using the above callback:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;Callback&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;someRandomFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;example&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;Action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addSingle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                  &lt;span class=&quot;mf&quot;&gt;3.0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// duration  
&lt;/span&gt;                  &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// delay
&lt;/span&gt;                  &lt;span class=&quot;n&quot;&gt;TimingFunctions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExponentialEaseIn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                  &lt;span class=&quot;n&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name>Tyler Wood</name><email>me@tyskwo.com</email></author><summary type="html">Before I begin, the repo for Action can be found here.</summary></entry><entry><title type="html">Office Mayhem is going to PAX!</title><link href="http://localhost:4000/2017/office-mayhem-is-going-to-pax/" rel="alternate" type="text/html" title="Office Mayhem is going to PAX!" /><published>2017-03-03T00:00:00-05:00</published><updated>2017-03-03T00:00:00-05:00</updated><id>http://localhost:4000/2017/office-mayhem-is-going-to-pax</id><content type="html" xml:base="http://localhost:4000/2017/office-mayhem-is-going-to-pax/">&lt;p&gt;That’s right! &lt;em&gt;Office Mayhem&lt;/em&gt; was chosen by Champlain College to represent the school at PAXEast this coming weekend in Boston. This is such a huge honor for us as there is no lack of talent or amazing projects at Champlain right now. Be sure to stop by if you’re attending the conference! It’s acting as a big morale boost for the team, even though there’s been no shortage of inspiration this past week. &lt;a href=&quot;https://npaquettewordpress.wordpress.com&quot;&gt;Norman&lt;/a&gt; has been hard at work finishing up more character heads, and we’re trying our hardest to get four distinct characters in for PAX. &lt;a href=&quot;https://andrewmillsapblog.wordpress.com&quot;&gt;Andy&lt;/a&gt; and &lt;a href=&quot;http://andrewmessier.blogspot.com&quot;&gt;Andrew&lt;/a&gt; have finally gotten the character animations into the build, and they add so much life to the game. &lt;a href=&quot;http://richardkingcapstone.blogspot.com&quot;&gt;Richard&lt;/a&gt; has added a new round of sound effects for our new office toys. I have finished adding the rest of the base tasks and interruptables, allowing us to focus more on group interactions in the coming weeks. We also have added Konami code detection to the start screen, which rains down the entire alphabet for true Scrabble gameplay. We also have cleaned up the rougher edges of the code base, which has in the process squashed the majority of the (relatively few) bugs that have popped up at QA recently. If I could say so myself, &lt;em&gt;Office Mayhem&lt;/em&gt; is shaping up quite nicely: it plays smoothly and has a nice amount of polish to it, and I hope that shows well at PAX.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/blog/2017/03/konami.png&quot; alt=&quot;konami&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This coming week, our main focus is to add the final touches for PAX. Things like adding the other characters, adding an attract mode of sorts, and the big bucket item: reimplementing the break rooms. Rather than being traditional break rooms, we’re making the entire floor a whiteboard that players can draw on. Tony’s been hard at work over the past week, and he’s making really great progress on that front. I’ll be focusing on smaller issues like adding more particle effects where needed, and iterating on the (now outdated) tutorial.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Today during class, we were talking about adding a ball pit cheat to the start screen. I said why not?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/blog/2017/03/ballpit.gif&quot; alt=&quot;ball-pit&quot; /&gt;&lt;/p&gt;</content><author><name>Tyler Wood</name><email>me@tyskwo.com</email></author><summary type="html">That’s right! Office Mayhem was chosen by Champlain College to represent the school at PAXEast this coming weekend in Boston. This is such a huge honor for us as there is no lack of talent or amazing projects at Champlain right now. Be sure to stop by if you’re attending the conference! It’s acting as a big morale boost for the team, even though there’s been no shortage of inspiration this past week. Norman has been hard at work finishing up more character heads, and we’re trying our hardest to get four distinct characters in for PAX. Andy and Andrew have finally gotten the character animations into the build, and they add so much life to the game. Richard has added a new round of sound effects for our new office toys. I have finished adding the rest of the base tasks and interruptables, allowing us to focus more on group interactions in the coming weeks. We also have added Konami code detection to the start screen, which rains down the entire alphabet for true Scrabble gameplay. We also have cleaned up the rougher edges of the code base, which has in the process squashed the majority of the (relatively few) bugs that have popped up at QA recently. If I could say so myself, Office Mayhem is shaping up quite nicely: it plays smoothly and has a nice amount of polish to it, and I hope that shows well at PAX.</summary></entry><entry><title type="html">A Quiet Week in No Man’s Land</title><link href="http://localhost:4000/2017/a-quiet-week-in-no-mans-land/" rel="alternate" type="text/html" title="A Quiet Week in No Man's Land" /><published>2017-02-26T00:00:00-05:00</published><updated>2017-02-26T00:00:00-05:00</updated><id>http://localhost:4000/2017/a-quiet-week-in-no-mans-land</id><content type="html" xml:base="http://localhost:4000/2017/a-quiet-week-in-no-mans-land/">&lt;p&gt;It’s been quiet in the office this week (note: we don’t actually work in an office, but we’re &lt;em&gt;Office Mayhem&lt;/em&gt;, so I had a moral obligation to make the joke). The art team has been hard at work tidying up assets and animations, and the design team has been balancing the task and movement systems. The engineering team has been hard at work at polishing the edges. &lt;a href=&quot;https://tonyl.info/&quot;&gt;Tony&lt;/a&gt; has been hard at work &lt;a href=&quot;https://tonyl.info/2017/02/09/office-mayhem-extending-unity/&quot;&gt;cleaning up the elevator interface for our designers,&lt;/a&gt; and Andy has been crunching the animation pipeline behind the scenes. I spent this week hunting down any remaining bugs.&lt;/p&gt;

&lt;p&gt;There wasn’t a lot of visual progress this week, but that’s ok. The game as a whole is stronger, and we have a lot planned for these coming weeks. We’ve come to a new solution to the break rooms (but for now is under wraps), and that will be a large (and probably difficult) project over the next week. We’re hoping to get Norman’s characters with Andrew’s animations into the actual build this week, and we’re excited to see just how much life they add to the office. The accolade system is also very close to being implemented; we just need to decide on the final representation of them and how they’ll affect the players/break room environment. We also cleaned up &lt;code class=&quot;highlighter-rouge&quot;&gt;Interruptables&lt;/code&gt; this past week, so we’re hoping and excited to start adding group task types to the mix (and with that comes the concept of point stages and difficulty curves).&lt;/p&gt;

&lt;p&gt;We have a lot on our plate this coming week (obviously), and that’s not even including the smaller things like replacing outdated models, cleaning up some of our data-holding architecture, and implementing the alphabet rain in the start menu when the Konami code is input. (I really hope if &lt;em&gt;Office Mayhem&lt;/em&gt; reaches the public, someone stumbles upon this post and realizes the immense power they have just unlocked). It’s going to be a long, but very exciting week.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;In other news, &lt;a href=&quot;https://gauzewave.wordpress.com&quot;&gt;David&lt;/a&gt; and I finally finished our particle system project for Game Physics, and I could not be happier with the result. Expect a write-up on that sometime this week.&lt;/p&gt;</content><author><name>Tyler Wood</name><email>me@tyskwo.com</email></author><summary type="html">It’s been quiet in the office this week (note: we don’t actually work in an office, but we’re Office Mayhem, so I had a moral obligation to make the joke). The art team has been hard at work tidying up assets and animations, and the design team has been balancing the task and movement systems. The engineering team has been hard at work at polishing the edges. Tony has been hard at work cleaning up the elevator interface for our designers, and Andy has been crunching the animation pipeline behind the scenes. I spent this week hunting down any remaining bugs.</summary></entry><entry><title type="html">Designing a Protocol-Oriented, Event-Driven Entity-Component System*</title><link href="http://localhost:4000/2017/designing-a-protocol-oriented-event-driven-ecs/" rel="alternate" type="text/html" title="Designing a Protocol-Oriented, Event-Driven Entity-Component System*" /><published>2017-02-21T00:00:00-05:00</published><updated>2017-02-21T00:00:00-05:00</updated><id>http://localhost:4000/2017/designing-a-protocol-oriented-event-driven-ecs</id><content type="html" xml:base="http://localhost:4000/2017/designing-a-protocol-oriented-event-driven-ecs/">&lt;p&gt;I have decided to pick up &lt;em&gt;&lt;a href=&quot;http://localhost:4000/2015/DASHockey-At-GMGF/&quot;&gt;DASHockey again.&lt;/a&gt;&lt;/em&gt; When I last touched it (almost two years ago), the codebase was complete garbage. I tackled the game as a foray into developing for the then-new AppleTV and to be able to present it at the &lt;em&gt;Green Mountains Game Festival&lt;/em&gt;. As such, getting a complete game with AI out in a week was a pretty large task. Since I’m tackling it anew, I figured I should be a good programmer and rewrite the game from the ground up. I eventually want &lt;em&gt;DASHockey&lt;/em&gt; to have iPhone-connected remotes for true party game multiplayer, but for now let’s focus on the base architecture.&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;This post assumes the reader has a decent understanding of Swift. Thankfully, it’s a very verbose language, so it shouldn’t be too hard to get the high-level architecture from it. See &lt;a href=&quot;https://swift.org/documentation/&quot;&gt;Apple’s Swift handbook&lt;/a&gt; for a great resource on Swift.&lt;/p&gt;

&lt;h3 id=&quot;the-entity&quot;&gt;The Entity&lt;/h3&gt;

&lt;p&gt;In this protocol-oriented, event-driven example, the base entity isn’t too different from the &lt;a href=&quot;http://gameprogrammingpatterns.com/component.html&quot;&gt;classic pattern.&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Entity&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;components&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// name and tag attached to this entity&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;



    &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;components&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;NONE&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;components&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;components&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getTag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;NONE&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here, we have a simple array of &lt;code class=&quot;highlighter-rouge&quot;&gt;Component&lt;/code&gt; objects (which we’ll get to), a name and tag to reference this entity by, and methods for getting/setting these values. But what about finding components in our bucket?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Entity&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// get first component of type T&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;components&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as!&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// get all components of type T&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;findAllOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;returnArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;components&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;returnArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as!&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;returnArray&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// sample use:&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;rink&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Rink&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here, we use generics to be able to return any type of component (This is very similar to how Unity handles its ECS). In the singular search, we use the power of optionals to elegantly return nil if there’s no such component attached to this entity. For the multi-search, we return an empty array. In the sample use, notice that we use &lt;code class=&quot;highlighter-rouge&quot;&gt;ComponentType.self&lt;/code&gt;. The &lt;code class=&quot;highlighter-rouge&quot;&gt;.self&lt;/code&gt; is necessary to reference the class type, and not just the member type. It’s a small syntactical hiccup, but I think it is worth the power and flexibility it provides. If you’re savvy, you’ll notice this is in an &lt;em&gt;extension&lt;/em&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;Entity&lt;/code&gt;. I did this simply for organization purposes: we don’t declare any new member variables, so we can place these function in an extension. I name my extensions in comments for easy finding; this one is the ‘search extension’.&lt;/p&gt;

&lt;p&gt;For adding and updating components, we use a similar extension:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Entity&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;components&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// update all components that conform to UpdateableComponent&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;dt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;components&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Updateable&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as!&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Updateable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Adding is simple enough, but what exactly is happening with &lt;code class=&quot;highlighter-rouge&quot;&gt;update&lt;/code&gt;? Swift 2 added the &lt;a href=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/ControlFlow.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;where&lt;/code&gt; clause&lt;/a&gt; – basically a filter on an array. Thus, in &lt;code class=&quot;highlighter-rouge&quot;&gt;update&lt;/code&gt;, we are iterating over all of our components, and if the current one is an &lt;code class=&quot;highlighter-rouge&quot;&gt;Updateable&lt;/code&gt; component, we call its &lt;code class=&quot;highlighter-rouge&quot;&gt;update&lt;/code&gt; method. It’ll make more sense in a little bit.&lt;/p&gt;

&lt;p&gt;That, at its core, is the entity in this system. It’s not very complicated, but can be easily expanded, which is always a great goal to have.&lt;/p&gt;

&lt;h3 id=&quot;the-component&quot;&gt;The Component&lt;/h3&gt;

&lt;p&gt;At its root, the &lt;code class=&quot;highlighter-rouge&quot;&gt;Component&lt;/code&gt; class has similar initializers, name and tag functions as the &lt;code class=&quot;highlighter-rouge&quot;&gt;Entity&lt;/code&gt; class. The interesting functionality comes from the use of protocols:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// in Component.swift:&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Updateable&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Renderable&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addToScene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SKNode&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;destroy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is designating that any component that conforms to the &lt;code class=&quot;highlighter-rouge&quot;&gt;Updateable&lt;/code&gt; component will have to contain a definition for the function &lt;code class=&quot;highlighter-rouge&quot;&gt;update&lt;/code&gt; that takes a double as a parameter (and similarly for the &lt;code class=&quot;highlighter-rouge&quot;&gt;Renderable&lt;/code&gt; protocol). What this does, at least in my setup, is that it takes items like the players, puck, and nets, and turns them from entities that would have to be handled by the scene to components that are held by a single entity. Basically, it’ just a reduction of one more layer, and it can be argued that it’s just renaming the architecture, shifting it up a level, but more importantly, it allows the puck object to contain all of its own logic, broken up into extensions and protocol implementations. Yes, in games with hundreds of thousands of objects this would not be ideal, but in &lt;em&gt;DASHockey&lt;/em&gt; where there are never more than ten objects in a scene, it works very well. For instance:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Puck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Renderable&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addToScene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;scene&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SKNode&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;destroy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;removeFromParent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here’s the puck’s implementation of the &lt;code class=&quot;highlighter-rouge&quot;&gt;Renderable&lt;/code&gt; protocol. Granted, it is extremely simple, but it allows for complete customization on a puck-level basis. In a sense, its similar to prefabs in Unity.&lt;/p&gt;

&lt;p&gt;Another high-level advantage of this system is that it allows for event-like components, like a &lt;code class=&quot;highlighter-rouge&quot;&gt;GoalScored&lt;/code&gt; component:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GoalScoredComponent&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;goalScored&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;team&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;.....&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Rink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GoalScoredComponent&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;goalScored&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;team&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;team&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;red&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;scene&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backgroundColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;red&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;team&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;blue&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;scene&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backgroundColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blue&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This, in turn, allows the code called for when a goal is scored be this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;goalScored&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;net&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Net&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;goalScored&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// find all of the GoalScored components and let them do their thing&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;score&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SKAction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;findAllOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GoalScoredComponent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;goalScored&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;team&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;net&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getTag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// find all of the GoalReset components and let them do their thing&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SKAction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;findAllOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GoalResetComponent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// let there be a pause between for the celebration&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;wait&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SKAction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;forDuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//global goal celebration length&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// create a sequence from it&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sequence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SKAction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// and run it! upon completion, start a new faceoff&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;scene&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;goalScored&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Faceoff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;faceoff&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;UI&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This code is incredibly concise, verbose, and clean. It pushes all of the logic of the objects into the objects themselves. It’s not without its flaws: it won’t work well for larger systems, it is hard to customize objects on a per-instance basis, and objects are authoritative over their own implementation. For &lt;em&gt;DASHockey&lt;/em&gt; though, this is a great system that allows the game to run in a concise matter.&lt;/p&gt;</content><author><name>Tyler Wood</name><email>me@tyskwo.com</email></author><summary type="html">I have decided to pick up DASHockey again. When I last touched it (almost two years ago), the codebase was complete garbage. I tackled the game as a foray into developing for the then-new AppleTV and to be able to present it at the Green Mountains Game Festival. As such, getting a complete game with AI out in a week was a pretty large task. Since I’m tackling it anew, I figured I should be a good programmer and rewrite the game from the ground up. I eventually want DASHockey to have iPhone-connected remotes for true party game multiplayer, but for now let’s focus on the base architecture.</summary></entry><entry><title type="html">Hang on, I need to answer the phone.</title><link href="http://localhost:4000/2017/hang-on-i-need-to-answer-the-phone/" rel="alternate" type="text/html" title="Hang on, I need to answer the phone." /><published>2017-02-17T00:00:00-05:00</published><updated>2017-02-17T00:00:00-05:00</updated><id>http://localhost:4000/2017/hang-on-i-need-to-answer-the-phone</id><content type="html" xml:base="http://localhost:4000/2017/hang-on-i-need-to-answer-the-phone/">&lt;p&gt;Interruptables are now in &lt;em&gt;Office Mayhem&lt;/em&gt;. They are a new type of task, with a few additional rules. A single player is assigned them, and the color of the card is that player’s color. If they complete the interruptable before the timer expires, they’re safe. If they let the timer run out though, they lose the number of points on the card. Furthermore, if another player ‘steals’ it, the player who stole it &lt;em&gt;gains&lt;/em&gt; points, and the player it was assigned to loses points.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/blog/2017/02/interruptable.gif&quot; alt=&quot;interruptable-example&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bringing interruptables to testing has seemed to be positive so far, but it is still in its early stages. There is a bug where the timer doesn’t always start, rendering the interruptable uncomplete-able, but I hope to have that fixed for this coming week. We are happy to report that interruptables are doing their assigned job of making sure players are looking at the task cards and not just completing tasks that they think will be active. Up until this point, we only had four tasks, so the chances of completing a random task and being awarded points for it was a high probability, but as we add more tasks, players will have to look at what tasks are active. Interruptables are making players do this, and the player don’t seem to think it’s unfair, which is great for the roadmap of new tasks we want to implement.&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
 &lt;img src=&quot;http://localhost:4000/assets/images/blog/2017/02/interruptable-steal.gif&quot; /&gt;
  &lt;figcaption&gt;Interruptables can be stolen - the player who steals it gets points.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;In other news, &lt;a href=&quot;http://andrewmillsapblog.wordpress.com&quot;&gt;Andy&lt;/a&gt; has completed our long-overdue intro sequence. Before each round starts, the camera is zoomed out, showcasing the entire level (and giving players an opportunity to locate all of the items in the level) before displaying what ‘day of the week’ it is and zooming in. It’s a small change, but it adds so much to the flow between levels, and players have really been appreciative of being able to glance at the entire level before being put into the action. Andy also has updated our &lt;code class=&quot;highlighter-rouge&quot;&gt;ScoreCard&lt;/code&gt; UI so that it is easier to see which player is in the lead without having to read all of the scores – it’s like a reverse cell service icon.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/blog/2017/02/scorecard-example.gif&quot; alt=&quot;scorecard-example&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://tonyl.info&quot;&gt;Tony&lt;/a&gt; fleshed out the framework for our accolade system. Right now, all it keeps track of is number of tasks completed and number of items sabotaged, but the framework is complete, which was a pretty large undertaking. The next task obviously is to create the actual accolades on the end screen and to award them to players. The team is still trying to figure out the best way to do this. On one hand, we really want to have in-office trophies the color of the player that won it, but we don’t know an easy way to distinguish the different accolades that way. Tony is also working on a transition framework to better hide the switching of Unity scenes.&lt;/p&gt;
&lt;figure class=&quot;align-right&quot; style=&quot;width:350px&quot;&gt;
 &lt;img src=&quot;http://localhost:4000/assets/images/blog/2017/02/charlie-run.gif&quot; /&gt;
  &lt;figcaption&gt;He's on a treadmill right now, but soon enough he'll be running through the office.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;For instance, on the start menu when all of the players crowd around the door to go to the first level, everything freezes as Unity’s &lt;code class=&quot;highlighter-rouge&quot;&gt;SceneManager&lt;/code&gt; class loads the &lt;code class=&quot;highlighter-rouge&quot;&gt;level_1&lt;/code&gt; scene. We hope to mask this by putting some sort of fade/screen-wipe, etc. on either end of loading a scene. It’s a polish mechanic, but I think it would add a lot to the professionalism of &lt;em&gt;Office Mayhem.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The art team has been hard at work this past week. &lt;a href=&quot;https://npaquettewordpress.wordpress.com&quot;&gt;Norman&lt;/a&gt; has finished our first character, Charles, and &lt;a href=&quot;http://andrewmessier.blogspot.com&quot;&gt;Andrew&lt;/a&gt; has finished animating him. I’m excited to get these into the build. &lt;a href=&quot;https://willconcannonart.com&quot;&gt;Will&lt;/a&gt; has been hard at work cleaning up some of the pre-existing assets (like the computer and outbox) to make sure they read the better in the office, and creating new assets like the coffee pot, bathroom door, and server rack (Wait, a server rack? Yes, stay tuned).&lt;/p&gt;

&lt;figure class=&quot;align-right&quot; style=&quot;width:200px&quot;&gt;
 &lt;img src=&quot;http://localhost:4000/assets/images/blog/2017/02/upcomingWork.png&quot; /&gt;
  &lt;figcaption&gt;If you are Sherlock Holmes, you might be able to figure out some of our planned features on the left.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;This coming week we plan on cleaning up a lot of smaller polish-level issues we have been neglecting over the past couple of weeks. While doing that, the programming team also hopes to clean up some of the rough edges of the codebase, specifically relating to the way &lt;code class=&quot;highlighter-rouge&quot;&gt;Interruptables&lt;/code&gt; are handled on the back end, and smaller changes to the elevator, accolade, and message systems. The artists are cranking away at new environment assets, characters and animations, and the design team is going to be hard at work creating and balancing new tasks and laying out new levels. The end of the semester is fast approaching, and we’re super excited to see how much (and what) we can add to &lt;em&gt;Office Mayhem&lt;/em&gt; before then.&lt;/p&gt;

&lt;p&gt;Also, I mentioned &lt;a href=&quot;http://localhost:4000/2017/graduation-t-14-weeks/&quot;&gt;a couple of weeks ago&lt;/a&gt; that I was working on transferring my website from Wordpress to my own self-hosted solution. Hopefully you noticed the site is a little different? I’m super excited because I finally have full control over things like the CSS, asset management, etc. In my opinion, this new site is a lot cleaner. Have a look around!&lt;/p&gt;</content><author><name>Tyler Wood</name><email>me@tyskwo.com</email></author><summary type="html">Interruptables are now in Office Mayhem. They are a new type of task, with a few additional rules. A single player is assigned them, and the color of the card is that player’s color. If they complete the interruptable before the timer expires, they’re safe. If they let the timer run out though, they lose the number of points on the card. Furthermore, if another player ‘steals’ it, the player who stole it gains points, and the player it was assigned to loses points.</summary></entry><entry><title type="html">Iteration.</title><link href="http://localhost:4000/2017/iteration/" rel="alternate" type="text/html" title="Iteration." /><published>2017-02-10T00:00:00-05:00</published><updated>2017-02-10T00:00:00-05:00</updated><id>http://localhost:4000/2017/iteration</id><content type="html" xml:base="http://localhost:4000/2017/iteration/">&lt;p&gt;It’s been a relatively slow week for &lt;em&gt;Office Mayhem&lt;/em&gt;, but &lt;em&gt;9:5 Games&lt;/em&gt; has still accomplished a lot this past week: the artists have been working on models, characters, and rigs, the designers have been producing new sound effects, building levels, and balancing systems, and the programmers have been finishing systems from last week. &lt;a href=&quot;http://tonyl.info&quot;&gt;Tony&lt;/a&gt; finished up the elevator from last week and implemented a revised dash system that uses a cool down to discourage players from constantly mashing the B-button as fast as humanly (or inhumanly) as possible. To combat this, the designers (and Tony) created a coffee pot item that allows players to move at their fastest speed for a little while after using it. It hasn’t gone through much testing, but it has already created a couple new strategies from what we’ve seen.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://andrewmillsapblog.wordpress.com&quot;&gt;Andy&lt;/a&gt; spent this week finishing up crunch time to make it more pressure-inducing for the players (and more obvious what’s going on!), and reworking the score card UI so players can more easily figure out who’s winning (and thus whose computer to break).&lt;/p&gt;

&lt;p&gt;I spent this week squashing the few bugs that have been popping up in QA, as well as lending a helping hand to Tony and Andy when they’ve needed it. I created a &lt;code class=&quot;highlighter-rouge&quot;&gt;DataHolder&lt;/code&gt; class that helps keep track of game data between rounds, which will be the start of our outer game loop framework, and I started the &lt;code class=&quot;highlighter-rouge&quot;&gt;Interruptable&lt;/code&gt; framework. For now, I’m going the fast and easy, if not sloppy, route to get it working and tested first before spending the time to refactor it into the current task system. I would rather not waste the time to implement it cleanly and have QA rip it out of the game.&lt;/p&gt;

&lt;p&gt;This coming week, I’m hoping to finish up interruptables, and I’m hoping Tony and Andy can clean up transitions between scenes, and start the accolade system. I feel like morale fell slightly this week (whether because of lack of visual progress, the plague that’s going around, or simply unenthused to tackle the problems at hand), so I’m hoping to give them (and the rest of the team) more freedom to decide what they want to work on.&lt;/p&gt;

&lt;p&gt;Expect gifs and code next week :)&lt;/p&gt;

&lt;p&gt;In other news, &lt;a href=&quot;https://gauzewave.wordpress.com&quot;&gt;David&lt;/a&gt; and I are creating a particle system container in Game Physics, and it’s shaping up quite nicely. Expect to see a blog post on it soon.&lt;/p&gt;</content><author><name>Tyler Wood</name><email>me@tyskwo.com</email></author><summary type="html">It’s been a relatively slow week for Office Mayhem, but 9:5 Games has still accomplished a lot this past week: the artists have been working on models, characters, and rigs, the designers have been producing new sound effects, building levels, and balancing systems, and the programmers have been finishing systems from last week. Tony finished up the elevator from last week and implemented a revised dash system that uses a cool down to discourage players from constantly mashing the B-button as fast as humanly (or inhumanly) as possible. To combat this, the designers (and Tony) created a coffee pot item that allows players to move at their fastest speed for a little while after using it. It hasn’t gone through much testing, but it has already created a couple new strategies from what we’ve seen.</summary></entry><entry><title type="html">Sometimes the best tutorial is no tutorial.</title><link href="http://localhost:4000/2017/sometimes-the-best-tutorial-is-no-tutorial/" rel="alternate" type="text/html" title="Sometimes the best tutorial is no tutorial." /><published>2017-02-03T00:00:00-05:00</published><updated>2017-02-03T00:00:00-05:00</updated><id>http://localhost:4000/2017/sometimes-the-best-tutorial-is-no-tutorial</id><content type="html" xml:base="http://localhost:4000/2017/sometimes-the-best-tutorial-is-no-tutorial/">&lt;p&gt;An &lt;em&gt;Office Mayhem&lt;/em&gt; goal of mine for a long time has been to create a world around the office. Not necessarily the buildings and offices around the level, but the office itself. For the longest time, our start and end menus were static. They were pretty to look at, and thematic, but it offered very little value to the players. This week, that finally changed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/blog/2017/02/lolwut.png&quot; alt=&quot;lolwut&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We now have ‘immersive menus’ – basically skeleton levels that players can run around in without the pressure of the tasks or timer. Confetti still falls, and broken computers still fly, and players have really taken to these new rooms, sometimes spending more time there than in the actual game! We’ve done more than just that though. Our number one request from testers has been to be able to copy broken computers, and even though it was usually tongue-in-cheek, it’s something we’ve been wanting to add for a while. Every item that can be picked up in &lt;em&gt;Office Mayhem&lt;/em&gt; now (and in the future) can be copied (and thrown out). That’s a big plus.&lt;/p&gt;

&lt;p&gt;More still, we added our logo to the immersive start screen. Not only that, but we added ‘item functionality’ to the individual letters. That means letters can be picked up, copied, and thrown. Testers have been using this as a form of Scrabble, and it’s pretty funny:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/blog/2017/02/hamfam.png&quot; alt=&quot;hamfam&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://andrewmillsapblog.wordpress.com&quot;&gt;Andy&lt;/a&gt; has been hard at work finishing up crunch time and adding a ‘drop-in/drop-out’ feature to the start screen, allowing players to plug and unplug controllers, which is a nice ‘quality of life’ feature. He also implemented location-based menu triggers for the immersive menus, allowing more of our UI and game flow to be diagetic.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://tonyl.info&quot;&gt;Tony&lt;/a&gt; spent this week working on the elevator: a replacement for our current spawning system. Now, instead of items appearing out of thin air, they will now be thrown out of the elevator, like this:&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
 &lt;img src=&quot;http://localhost:4000/assets/images/blog/2017/02/elevator.gif&quot; /&gt;
  &lt;figcaption&gt;I don't think there will ever be a need for 50 outboxes, but this gif makes me laugh every time.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;We have a lot on our plate this coming week: finish up the elevator to make it more customizable for the designers, tweak crunch time based on feedback from testers, better the location trigger system and make it more obvious to players what to do, create a framework for handling multiple rounds in a game, and start implementing ‘interruptibles’: a new kind of task. Let’s see how far we can get.&lt;/p&gt;</content><author><name>Tyler Wood</name><email>me@tyskwo.com</email></author><summary type="html">An Office Mayhem goal of mine for a long time has been to create a world around the office. Not necessarily the buildings and offices around the level, but the office itself. For the longest time, our start and end menus were static. They were pretty to look at, and thematic, but it offered very little value to the players. This week, that finally changed.</summary></entry></feed>
